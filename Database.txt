START TRANSACTION
;

DROP SEQUENCE IF EXISTS isik_isik_id_seq CASCADE
;

DROP TABLE IF EXISTS Amet CASCADE
;

DROP TABLE IF EXISTS Isiku_seisundi_liik CASCADE
;

DROP TABLE IF EXISTS Kauba_kategooria CASCADE
;

DROP TABLE IF EXISTS Kauba_kategooria_tyyp CASCADE
;

DROP TABLE IF EXISTS Kauba_seisundi_liik CASCADE
;

DROP TABLE IF EXISTS Kliendi_seisundi_liik CASCADE
;

DROP TABLE IF EXISTS Pakend CASCADE
;

DROP TABLE IF EXISTS Puidutyyp CASCADE
;

DROP TABLE IF EXISTS Riik CASCADE
;

DROP TABLE IF EXISTS Tootaja_seisundi_liik CASCADE
;

DROP TABLE IF EXISTS Tootja CASCADE
;

DROP TABLE IF EXISTS Isik CASCADE
;

DROP TABLE IF EXISTS Tootaja CASCADE
;

DROP TABLE IF EXISTS Klient CASCADE
;

DROP TABLE IF EXISTS Kaup CASCADE
;

DROP TABLE IF EXISTS Kauba_kategooria_omamine CASCADE
;


DROP DOMAIN IF EXISTS ei_koosne_tyhikutest CASCADE
;

DROP DOMAIN IF EXISTS reg_aeg_vahemik CASCADE
;

DROP FUNCTION IF EXISTS f_lopeta_kaup(p_kaup_kood Kaup.kaup_kood%TYPE) CASCADE
;

DROP FUNCTION IF EXISTS f_muuda_kaup_mitteaktiivseks(p_kaup_kood Kaup.kaup_kood%TYPE) CASCADE
;

DROP FUNCTION IF EXISTS f_unusta_kaup(p_kaup_kood Kaup.kaup_kood%TYPE) CASCADE
;

DROP FUNCTION IF EXISTS f_aktiveeri_kaup(p_kaup_kood Kaup.kaup_kood%TYPE) CASCADE
;

DROP FUNCTION IF EXISTS f_on_laojuhataja(p_e_mail text, p_parool text) CASCADE
;

DROP FUNCTION IF EXISTS f_lisa_kaup_kategooriasse(p_e_mail text, p_parool text) CASCADE
;

DROP FUNCTION IF EXISTS f_muuda_kaup(
p_kaup_kood_vana Kaup.kaup_kood%TYPE,
p_kaup_kood_uus Kaup.kaup_kood%TYPE,
p_pakend_kood_uus Kaup.pakend_kood%TYPE,
p_puidutyyp_kood_uus Kaup.puidutyyp_kood%TYPE,
p_tootja_kood_uus Kaup.tootja_kood%TYPE,
p_maht_l_uus Kaup.maht_l%TYPE,
p_pakk_hind_uus Kaup.pakk_hind%TYPE
) CASCADE
;

DROP FUNCTION IF EXISTS  f_registreeri_kaup (
p_kaup_kood Kaup.kaup_kood%TYPE,
p_pakend_kood Kaup.pakend_kood%TYPE,
p_puidutyyp_kood Kaup.puidutyyp_kood%TYPE,
p_tootja_kood Kaup.tootja_kood%TYPE,
p_reg_isik_id Kaup.reg_isik_id%TYPE,
p_maht_l Kaup.maht_l%TYPE,
p_pakk_hind Kaup.pakk_hind%TYPE
) CASCADE
;

DROP FUNCTION IF EXISTS kauba_seisundi_liik_kood_peab_olema_1();

DROP FUNCTION IF EXISTS kustutada_voib_kaupa_kauba_seisundi_liik_koodiga_1();

DROP FUNCTION IF EXISTS isikul_ei_ole_oigust_kaupa_muuta_ega_lisada();

DROP TRIGGER IF EXISTS kaup_insert_trigger ON Kaup;

DROP TRIGGER IF EXISTS kaup_delete_trigger ON Kaup;

DROP TRIGGER IF EXISTS kaup_insert_trigger_kontrolli_isik ON Kaup;

DROP TRIGGER IF EXISTS kaup_delete_trigger_kontrolli_isik ON Kaup;

DROP FOREIGN TABLE IF EXISTS Isik_jsonb CASCADE;

DROP FOREIGN TABLE IF EXISTS Riik_jsonb CASCADE;

DROP SERVER IF EXISTS minu_testandmete_server_apex CASCADE;

DROP USER MAPPING IF EXISTS FOR t154829 SERVER minu_testandmete_server_apex;

DROP VIEW IF EXISTS  CASCADE;

DROP VIEW IF EXISTS public.vaata_koiki_kaupu CASCADE;

DROP VIEW IF EXISTS public.vaata_ootel_mitteaktiivsed_kaupu CASCADE;

DROP VIEW IF EXISTS public.vaata_kaupade_pohiandmeid CASCADE;

DROP VIEW IF EXISTS public.vaata_aktiivsed_mitteaktiivsed_kaupu CASCADE;

DROP VIEW IF EXISTS public.vaata_kaupade_koondaruannet CASCADE;

DROP INDEX IF EXISTS idx_fk_Kauba_Kategooria_kauba_kategooria_tyyp_kood;
DROP INDEX IF EXISTS idx_fk_Isik_isiku_seisundi_liik_kood;
DROP INDEX IF EXISTS idx_fk_Isik_riik_kood;
DROP INDEX IF EXISTS idx_Isik_perenimi_eesnimi;
DROP INDEX IF EXISTS idx_fk_Tootaja_amet_kood;
DROP INDEX IF EXISTS idx_fk_Tootaja_tootaja_seisundi_liik_kood;
DROP INDEX IF EXISTS idx_fk_Klient_kliendi_seisundi_liik_kood;
DROP INDEX IF EXISTS idx_fk_Kaup_kauba_seisundi_liik_kood;
DROP INDEX IF EXISTS idx_fk_Kaup_pakend_kood;
DROP INDEX IF EXISTS idx_fk_Kaup_puidutyyp_kood;
DROP INDEX IF EXISTS idx_fk_Kaup_reg_isik_id;
DROP INDEX IF EXISTS idx_fk_Kaup_tootja_kood;
DROP INDEX IF EXISTS idx_fk_Kauba_Kategooria_Omamine_kauba_kategooria_kood;

DROP EXTENSION IF EXISTS pgcrypto CASCADE;

DROP EXTENSION IF EXISTS postgres_fdw CASCADE;


CREATE DOMAIN ei_koosne_tyhikutest AS
varchar(50) NOT NULL
CHECK(
   VALUE !~'^[[:space:]]*$'
);


CREATE DOMAIN reg_aeg_vahemik AS
timestamp NOT NULL
CHECK(
   '2010-01-01 00:00:00' <= VALUE AND '2100-12-31 23:59:59' >= VALUE
);

CREATE TABLE Amet
(
	amet_kood smallint NOT NULL,
	nimetus ei_koosne_tyhikutest,
	kirjeldus varchar(255)	,
	CONSTRAINT pk_Amet_amet_kood PRIMARY KEY (amet_kood),
	CONSTRAINT uq_Amet_nimetus UNIQUE (nimetus),
	CONSTRAINT chk_Amet_kirjeldus_ei_koosne_tyhikutest CHECK (kirjeldus!~'^[[:space:]]*$')
) WITH (fillfactor=90)
;

CREATE TABLE Isiku_seisundi_liik
(
	isiku_seisundi_liik_kood smallint NOT NULL,
	nimetus ei_koosne_tyhikutest,
	CONSTRAINT pk_Isiku_Seisundi_Liik_isiku_seisundi_liik_kood PRIMARY KEY (isiku_seisundi_liik_kood),
	CONSTRAINT uq_Isiku_Seisundi_Liik_nimetus UNIQUE (nimetus)
)
;

CREATE TABLE Kauba_kategooria_tyyp
(
	kauba_kategooria_tyyp_kood smallint NOT NULL,
	nimetus ei_koosne_tyhikutest,
	CONSTRAINT pk_Kauba_Kategooria_Tyyp_kauba_kategooria_tyyp_kood PRIMARY KEY (kauba_kategooria_tyyp_kood),
	CONSTRAINT uq_Kauba_Kategooria_Tyyp_nimetus UNIQUE (nimetus)
)
;


CREATE TABLE Kauba_kategooria
(
	kauba_kategooria_kood smallint NOT NULL,
	kauba_kategooria_tyyp_kood smallint NOT NULL,
	nimetus ei_koosne_tyhikutest,
	CONSTRAINT pk_Kauba_Kategooria_kauba_kategooria_kood PRIMARY KEY (kauba_kategooria_kood),
	CONSTRAINT uq_Kauba_Kategooria_nimetus UNIQUE (nimetus),
	CONSTRAINT fk_Kauba_Kategooria_kauba_kategooria_tyyp_kood FOREIGN KEY (kauba_kategooria_tyyp_kood) REFERENCES Kauba_kategooria_tyyp (kauba_kategooria_tyyp_kood) ON DELETE No Action ON UPDATE Cascade
)
;

CREATE TABLE Kliendi_seisundi_liik
(
	kliendi_seisundi_liik_kood smallint NOT NULL,
	nimetus ei_koosne_tyhikutest,
	CONSTRAINT pk_Kliendi_Seisundi_Liik_kliendi_seisundi_liik_kood PRIMARY KEY (kliendi_seisundi_liik_kood),
	CONSTRAINT uq_Kliendi_Seisundi_Liik_nimetus UNIQUE (nimetus)
)
;


CREATE TABLE Kauba_seisundi_liik
(
	kauba_seisundi_liik_kood smallint NOT NULL,
	nimetus ei_koosne_tyhikutest,
	CONSTRAINT pk_Kauba_Seisundi_Liik_kauba_seisundi_liik_kood PRIMARY KEY (kauba_seisundi_liik_kood),
	CONSTRAINT uq_Kauba_Seisundi_Liik_nimetus UNIQUE (nimetus)
)
;


CREATE TABLE Pakend
(
	pakend_kood smallint NOT NULL,
	nimetus ei_koosne_tyhikutest,
	pilt varchar(2100)	 NOT NULL,
	CONSTRAINT pk_Pakend_pakend_kood PRIMARY KEY (pakend_kood),
	CONSTRAINT uq_Pakend_nimetus UNIQUE (nimetus),
	CONSTRAINT uq_Pakend_pilt UNIQUE (pilt),
	CONSTRAINT chk_Pakend_pilt_url_loppeb_jpg CHECK (UPPER(RIGHT(pilt,4))='.JPG')
)
;

CREATE TABLE Puidutyyp
(
	puidutyyp_kood smallint NOT NULL,
	nimetus ei_koosne_tyhikutest,
	CONSTRAINT pk_Puidutyyp_puidutyyp_kood PRIMARY KEY (puidutyyp_kood),
	CONSTRAINT uq_Puidutyyp_nimetus UNIQUE (nimetus)
)
;

CREATE TABLE Riik
(
	riik_kood char(3)	 NOT NULL,
	nimetus ei_koosne_tyhikutest,
	CONSTRAINT pk_Riik_riik_kood PRIMARY KEY (riik_kood),
	CONSTRAINT uq_Riik_nimetus UNIQUE (nimetus),
	CONSTRAINT chk_Riik_riik_kood_koosneb_kolmest_suur_tahest CHECK (riik_kood ~ '^[A-Z]{3}$')
)
;

CREATE TABLE Tootaja_seisundi_liik
(
	tootaja_seisundi_liik_kood smallint NOT NULL,
	nimetus ei_koosne_tyhikutest,
	CONSTRAINT pk_Tootaja_Seisundi_Liik_tootaja_seisundi_liik_kood PRIMARY KEY (tootaja_seisundi_liik_kood),
	CONSTRAINT uq_Tootaja_Seisundi_Liik_nimetus UNIQUE (nimetus)
)
;

CREATE TABLE Tootja
(
	tootja_kood smallint NOT NULL,
	nimetus ei_koosne_tyhikutest,
	CONSTRAINT pk_Tootja_tootja_kood PRIMARY KEY (tootja_kood),
	CONSTRAINT uq_Tootja_nimetus UNIQUE (nimetus)
)
;

CREATE TABLE Isik
(
	isik_id bigserial NOT NULL,
	isiku_seisundi_liik_kood smallint NOT NULL DEFAULT 1,
	e_mail varchar(354)	 NOT NULL,
	isikukood varchar(50)	 NOT NULL,
	riik_kood char(3)	 NOT NULL,
	synni_kp date NOT NULL,
	parool varchar(60)	 NOT NULL,
	reg_aeg reg_aeg_vahemik DEFAULT localtimestamp(0),
	elukoht varchar(1000)	 NOT NULL,
	eesnimi varchar(1000)	,
	perenimi varchar(1000)	,
	CONSTRAINT pk_Isik_isik_id PRIMARY KEY (isik_id),
	CONSTRAINT uq_Isik_e_mail UNIQUE (e_mail),
	CONSTRAINT uq_Isik_isikukood_riik_kood UNIQUE (isikukood,riik_kood),
	CONSTRAINT chk_Isik_e_mail_sisaldab_at_marki CHECK (e_mail LIKE '%@%'),
	CONSTRAINT chk_Isik_isikukood_ei_koosne_tyhikutest CHECK (isikukood!~'^[[:space:]]*$'),
	CONSTRAINT chk_Isik_synni_kp_vaiksem_reg_ajast CHECK (synni_kp <= reg_aeg),
	CONSTRAINT chk_Isik_eesnimi_voi_perenimi_peab_olema_maaratud CHECK (eesnimi IS NOT NULL OR perenimi IS NOT NULL),
	CONSTRAINT chk_Isik_eesnimi_ei_koosne_tyhikutest CHECK (eesnimi!~'^[[:space:]]*$'),
	CONSTRAINT chk_Isik_perenimi_ei_koosne_tyhikutest CHECK (perenimi!~'^[[:space:]]*$'),
	CONSTRAINT chk_Isik_elukoht_ei_koosne_tyhikutest CHECK (elukoht!~'^[[:space:]]*$'),
	CONSTRAINT chk_Isik_elukoht_ei_koosne_numbritest CHECK (elukoht!~'^[0-9]*$'),
	CONSTRAINT chk_Isik_synni_kp_vahemik CHECK (synni_kp>='1900-01-01' AND synni_kp<='2100-12-31'),
	CONSTRAINT fk_Isik_isiku_seisundi_liik_kood FOREIGN KEY (isiku_seisundi_liik_kood) REFERENCES Isiku_seisundi_liik (isiku_seisundi_liik_kood) ON DELETE No Action ON UPDATE Cascade,
	CONSTRAINT fk_Isik_riik_kood FOREIGN KEY (riik_kood) REFERENCES Riik (riik_kood) ON DELETE No Action ON UPDATE Cascade
) WITH (fillfactor=90)
;

CREATE TABLE Tootaja
(
	isik_id bigint NOT NULL,
	amet_kood smallint NOT NULL,
	tootaja_seisundi_liik_kood smallint NOT NULL DEFAULT 1,
	CONSTRAINT pk_Tootaja_isik_id PRIMARY KEY (isik_id),
	CONSTRAINT fk_Tootaja_amet_kood FOREIGN KEY (amet_kood) REFERENCES Amet (amet_kood) ON DELETE No Action ON UPDATE Cascade,
	CONSTRAINT fk_Tootaja_tootaja_seisundi_liik_kood FOREIGN KEY (tootaja_seisundi_liik_kood) REFERENCES Tootaja_seisundi_liik (tootaja_seisundi_liik_kood) ON DELETE No Action ON UPDATE Cascade,
	CONSTRAINT fk_Tootaja_isik_id FOREIGN KEY (isik_id) REFERENCES Isik (isik_id) ON DELETE Cascade ON UPDATE No Action
)
;

CREATE TABLE Klient
(
	isik_id bigint NOT NULL,
	kliendi_seisundi_liik_kood smallint NOT NULL DEFAULT 1,
	on_nous_tylitamisega boolean NOT NULL DEFAULT false,
	CONSTRAINT pk_Klient_isik_id PRIMARY KEY (isik_id),
	CONSTRAINT fk_Klient_isik_id FOREIGN KEY (isik_id) REFERENCES Isik (isik_id) ON DELETE Cascade ON UPDATE No Action,
	CONSTRAINT fk_Klient_kliendi_seisundi_liik_kood FOREIGN KEY (kliendi_seisundi_liik_kood) REFERENCES Kliendi_seisundi_liik (kliendi_seisundi_liik_kood) ON DELETE No Action ON UPDATE Cascade
)
;

CREATE TABLE Kaup
(
	kaup_kood integer NOT NULL,
	kauba_seisundi_liik_kood smallint NOT NULL DEFAULT 1,
	pakend_kood smallint NOT NULL,
	puidutyyp_kood smallint NOT NULL,
	tootja_kood smallint NOT NULL,
	reg_isik_id bigint NOT NULL,
	maht_l smallint NOT NULL,
	reg_aeg reg_aeg_vahemik DEFAULT localtimestamp(0),
	pakk_hind numeric(7,2) NOT NULL,
	CONSTRAINT pk_Kaup_kaup_kood PRIMARY KEY (kaup_kood),
	CONSTRAINT chk_Kaup_pakk_hind_ei_ole_vaiksem_nullist CHECK (pakk_hind>=0),
	CONSTRAINT chk_Kaup_maht_l_on_suurem_nullist CHECK (maht_l>0),
	CONSTRAINT chk_Kaup_kaup_kood_on_suurem_nullist CHECK (kaup_kood>0),
	CONSTRAINT chk_Kaup_kaup_kood_on_kuni_kaheksa_numbrit_pikk CHECK (kaup_kood<10000000),
	CONSTRAINT fk_Kaup_kauba_seisundi_liik_kood FOREIGN KEY (kauba_seisundi_liik_kood) REFERENCES Kauba_seisundi_liik (kauba_seisundi_liik_kood) ON DELETE No Action ON UPDATE Cascade,
	CONSTRAINT fk_Kaup_pakend_kood FOREIGN KEY (pakend_kood) REFERENCES Pakend (pakend_kood) ON DELETE No Action ON UPDATE Cascade,
	CONSTRAINT fk_Kaup_puidutyyp_kood FOREIGN KEY (puidutyyp_kood) REFERENCES Puidutyyp (puidutyyp_kood) ON DELETE No Action ON UPDATE Cascade,
	CONSTRAINT fk_Kaup_tootja_kood FOREIGN KEY (tootja_kood) REFERENCES Tootja (tootja_kood) ON DELETE No Action ON UPDATE Cascade,
	CONSTRAINT fk_Kaup_reg_isik_id FOREIGN KEY (reg_isik_id) REFERENCES Tootaja (isik_id) ON DELETE No Action ON UPDATE No Action
)
;

CREATE TABLE Kauba_kategooria_omamine
(
	kaup_kood integer NOT NULL,
	kauba_kategooria_kood smallint NOT NULL,
	CONSTRAINT pk_Kauba_Kategooria_Omamine_kategooria_kaup_kood_kauba_kat_kood PRIMARY KEY (kaup_kood,kauba_kategooria_kood),
	CONSTRAINT fk_Kauba_Kategooria_Omamine_kaup_kood FOREIGN KEY (kaup_kood) REFERENCES Kaup (kaup_kood) ON DELETE Cascade ON UPDATE Cascade,
	CONSTRAINT fk_Kauba_Kategooria_Omamine_kauba_kategooria_kood FOREIGN KEY (kauba_kategooria_kood) REFERENCES Kauba_kategooria (kauba_kategooria_kood) ON DELETE No Action ON UPDATE Cascade
)
;

CREATE INDEX idx_fk_Kauba_Kategooria_kauba_kategooria_tyyp_kood ON Kauba_Kategooria (kauba_kategooria_tyyp_kood ASC);
CREATE INDEX idx_fk_Isik_isiku_seisundi_liik_kood ON Isik (isiku_seisundi_liik_kood ASC);
CREATE INDEX idx_fk_Isik_riik_kood ON Isik (riik_kood ASC);
CREATE INDEX idx_Isik_perenimi_eesnimi ON Isik (perenimi ASC,eesnimi ASC);
CREATE INDEX idx_fk_Tootaja_amet_kood ON Tootaja (amet_kood ASC);
CREATE INDEX idx_fk_Tootaja_tootaja_seisundi_liik_kood ON Tootaja (tootaja_seisundi_liik_kood ASC);
CREATE INDEX idx_fk_Klient_kliendi_seisundi_liik_kood ON Klient (kliendi_seisundi_liik_kood ASC);
CREATE INDEX idx_fk_Kaup_kauba_seisundi_liik_kood ON Kaup (kauba_seisundi_liik_kood ASC);
CREATE INDEX idx_fk_Kaup_pakend_kood ON Kaup (pakend_kood ASC);
CREATE INDEX idx_fk_Kaup_puidutyyp_kood ON Kaup (puidutyyp_kood ASC);
CREATE INDEX idx_fk_Kaup_reg_isik_id ON Kaup (reg_isik_id ASC);
CREATE INDEX idx_fk_Kaup_tootja_kood ON Kaup (tootja_kood ASC);
CREATE INDEX idx_fk_Kauba_Kategooria_Omamine_kauba_kategooria_kood ON Kauba_Kategooria_Omamine (kauba_kategooria_kood ASC);

COMMIT
;


/* ESIMESED INSERT LAUSED */

INSERT INTO Amet (amet_kood, nimetus, kirjeldus) VALUES (9321,'Pakkija', 'Pakkija ametialane ulesanne on komplekteerida muugiks minevat kaupa. Samuti umber pakkida kahjustunud ja/voi vananenud pakendiga kaupa.');
INSERT INTO Amet (amet_kood, nimetus, kirjeldus) VALUES (1324,'Laojuhataja', 'Laojuhataja ametialane ulesanne on lao juhatamine, tootajate too kontrollimine, nende eest vastutamine ja laoseisu haldamine.');
INSERT INTO Amet (amet_kood, nimetus, kirjeldus) VALUES (9329,'Laotooline', 'Laotoolise ametialane ulesanne on valjastada klientidele kaupa, komplekteerida tellimusi ning hoida korda laoruumides.');
INSERT INTO Amet (amet_kood, nimetus, kirjeldus) VALUES (4321,'Kaubahaldur', 'Kaubahalduri ametialane ulesanne on vastutada laoseisu korrektses, redigeerida kaupade andmeid, vastutada kaupade andmete õigsuse eest, sisestada muudatusi.');

INSERT INTO Tootja (tootja_kood, nimetus) VALUES (1111, 'Graanul Invest OU');
INSERT INTO Tootja (tootja_kood, nimetus) VALUES (2222, 'AST Saeveski');
INSERT INTO Tootja (tootja_kood, nimetus) VALUES (3333, 'Kergu Puit OU');

INSERT INTO Kliendi_seisundi_liik (kliendi_seisundi_liik_kood, nimetus) VALUES (1, 'Aktiivne');
INSERT INTO Kliendi_seisundi_liik (kliendi_seisundi_liik_kood, nimetus) VALUES (2, 'Mustas nimekirjas');

INSERT INTO Puidutyyp (puidutyyp_kood, nimetus) VALUES (1, 'Kasepuu');
INSERT INTO Puidutyyp (puidutyyp_kood, nimetus) VALUES (2, 'Kuusepuu');
INSERT INTO Puidutyyp (puidutyyp_kood, nimetus) VALUES (3, 'Lodjapuu');
INSERT INTO Puidutyyp (puidutyyp_kood, nimetus) VALUES (4, 'Tammepuu');

INSERT INTO Pakend (pakend_kood, nimetus, pilt) VALUES (1, 'Kile', 'URL1.jpg');
INSERT INTO Pakend (pakend_kood, nimetus, pilt) VALUES (2, 'Paber', 'URL2.jpg');
INSERT INTO Pakend (pakend_kood, nimetus, pilt) VALUES (3, 'Riie', 'URL3.jpg');

INSERT INTO Kauba_kategooria_tyyp (kauba_kategooria_tyyp_kood, nimetus) VALUES (1, 'Saepuru');

INSERT INTO Kauba_kategooria (kauba_kategooria_kood, kauba_kategooria_tyyp_kood, nimetus) VALUES (11, 1, 'Ehitus');
INSERT INTO Kauba_kategooria (kauba_kategooria_kood, kauba_kategooria_tyyp_kood, nimetus) VALUES (12, 1, 'Tarbe');
INSERT INTO Kauba_kategooria (kauba_kategooria_kood, kauba_kategooria_tyyp_kood, nimetus) VALUES (21, 1, 'Kodumaine');
INSERT INTO Kauba_kategooria (kauba_kategooria_kood, kauba_kategooria_tyyp_kood, nimetus) VALUES (22, 1, 'Valismaine');
INSERT INTO Kauba_kategooria (kauba_kategooria_kood, kauba_kategooria_tyyp_kood, nimetus) VALUES (31, 1, 'Kemikaalivaba');
INSERT INTO Kauba_kategooria (kauba_kategooria_kood, kauba_kategooria_tyyp_kood, nimetus) VALUES (32, 1, 'Kemikaalidega');
INSERT INTO Kauba_kategooria (kauba_kategooria_kood, kauba_kategooria_tyyp_kood, nimetus) VALUES (41, 1, 'Kuiv');
INSERT INTO Kauba_kategooria (kauba_kategooria_kood, kauba_kategooria_tyyp_kood, nimetus) VALUES (42, 1, 'Niiske');
INSERT INTO Kauba_kategooria (kauba_kategooria_kood, kauba_kategooria_tyyp_kood, nimetus) VALUES (43, 1, 'Marg');

INSERT INTO Isiku_seisundi_liik (isiku_seisundi_liik_kood, nimetus) VALUES (1, 'Elus');
INSERT INTO Isiku_seisundi_liik (isiku_seisundi_liik_kood, nimetus) VALUES (2, 'Surnud');


INSERT INTO Tootaja_seisundi_liik (tootaja_seisundi_liik_kood, nimetus) VALUES (1, 'Tootab');
INSERT INTO Tootaja_seisundi_liik (tootaja_seisundi_liik_kood, nimetus) VALUES (2, 'Praktikal');
INSERT INTO Tootaja_seisundi_liik (tootaja_seisundi_liik_kood, nimetus) VALUES (3, 'Haiguslehel');
INSERT INTO Tootaja_seisundi_liik (tootaja_seisundi_liik_kood, nimetus) VALUES (4, 'Puhkusel');

INSERT INTO Kauba_seisundi_liik (kauba_seisundi_liik_kood, nimetus) VALUES (1, 'Ootel');
INSERT INTO Kauba_seisundi_liik (kauba_seisundi_liik_kood, nimetus) VALUES (2, 'Mitteaktiivne');
INSERT INTO Kauba_seisundi_liik (kauba_seisundi_liik_kood, nimetus) VALUES (3, 'Aktiivne');
INSERT INTO Kauba_seisundi_liik (kauba_seisundi_liik_kood, nimetus) VALUES (4, 'Lopetatud');

/*  MINU TESTANDMETE SERVER */

CREATE EXTENSION IF NOT EXISTS postgres_fdw WITH SCHEMA public;
/*Lisan andmebaasi väliste andmete pakendamise laienduse, mis
võimaldab PostgreSQL andmebaasis lugeda andmeid teisest
PostgreSQL andmebaasist ja neid seal ka muuta (seda viimast pole
antud ülesandes vaja teha).
https://robots.thoughtbot.com/postgres-foreign-data-wrapper
PostgreSQL väliste tabelite mehhanism võimaldab juurdepääsu
erinevat tüüpi failide sisule, aga ka juurdepääsu andmetele, mis
on teistes andmebaasides (võimalik, et teine
andmebaasisüsteem/andmemudel), veebis, infokataloogides jne.
Vaadake PostgreSQL erinevaid väliste andmete pakendajaid:
https://wiki.postgresql.org/wiki/Foreign_data_wrappers */

CREATE SERVER minu_testandmete_server_apex FOREIGN DATA WRAPPER
postgres_fdw OPTIONS (host 'apex.ttu.ee', dbname 'testandmed',
port '5432');

/*Testandmed on apex.ttu.ee serveris andmebaasis testandmed.*/

CREATE USER MAPPING FOR t154829 SERVER
minu_testandmete_server_apex OPTIONS (user 't154829', password
'pgdeploy');


CREATE FOREIGN TABLE Riik_jsonb (
riik JSONB )
SERVER minu_testandmete_server_apex;

/*Loon välise tabeli, mis viitab teises andmebaasis olevale
tabelile, kus riikide andmed on JSON formaadis. Lähteandmed
pärinevad: https://gist.github.com/jeremybuis/4997305
psqlis on väliste tabelite nimekirja nägemiseks käsk \det */

/* TESTANDMED RIIK_JSONB TABELIST */

SELECT * FROM Riik_jsonb;
INSERT INTO Riik (riik_kood, nimetus)
SELECT riik->>'Alpha-3 code' AS riik_kood,
riik->>'English short name lower case' AS nimetus
FROM Riik_jsonb;
/*Loen välisest tabelist JSON formaadis andmed, teisendan need
sobivale kujule ja laadin enda andmebaasi tabelisse Riik.
Koodinäiteid ja viiteid PostgreSQLis JSON formaadis andmetega
töötamise kohta vaadake slaidikomplektist "Andmebaasisüsteemide
Oracle ja PostgreSQL kasutamine" – otsige sealt sõna JSON.*/

CREATE FOREIGN TABLE Isik_jsonb (
isik JSONB )
SERVER minu_testandmete_server_apex;

/* TESTANDMED ISIK_JSONB TABELIST */

SELECT * FROM Isik_jsonb;
/*Sellesse tabelisse andmete genereerimiseks kasutasin:
http://beta.json-generator.com */
INSERT INTO Isik(isiku_seisundi_liik_kood, e_mail, isikukood,
riik_kood, synni_kp, parool, elukoht, eesnimi, perenimi)
SELECT isiku_seisundi_liik_kood::smallint, e_mail, isikukood, riik_kood,
synni_kp::date, parool, elukoht, eesnimi, perenimi
FROM (SELECT isik->>'riik' AS riik_kood,
jsonb_array_elements(isik->'isikud')->>'isikukood' AS isikukood,
jsonb_array_elements(isik->'isikud')->>'eesnimi' AS eesnimi,
jsonb_array_elements(isik->'isikud')->>'perekonnanimi' AS
perenimi,
jsonb_array_elements(isik->'isikud')->>'email' AS e_mail,
jsonb_array_elements(isik->'isikud')->>'synni_aeg' AS synni_kp,
jsonb_array_elements(isik->'isikud')->>'seisund' AS
isiku_seisundi_liik_kood,
jsonb_array_elements(isik->'isikud')->>'parool' AS parool,
jsonb_array_elements(isik->'isikud')->>'aadress' AS elukoht
FROM isik_jsonb) AS lahteandmed
WHERE isiku_seisundi_liik_kood::smallint=1;


/* TEISED INSERT LAUSED */

INSERT INTO Tootaja (isik_id, amet_kood, tootaja_seisundi_liik_kood) VALUES (1, 1324, 1);
INSERT INTO Tootaja (isik_id, amet_kood, tootaja_seisundi_liik_kood) VALUES (2, 4321, 1);
INSERT INTO Tootaja (isik_id, amet_kood, tootaja_seisundi_liik_kood) VALUES (3, 9329, 1);
INSERT INTO Tootaja (isik_id, amet_kood, tootaja_seisundi_liik_kood) VALUES (4, 9329, 2);
INSERT INTO Tootaja (isik_id, amet_kood, tootaja_seisundi_liik_kood) VALUES (5, 9321, 4);

INSERT INTO Klient (isik_id, kliendi_seisundi_liik_kood, on_nous_tylitamisega) VALUES (6, default, default);
INSERT INTO Klient (isik_id, kliendi_seisundi_liik_kood, on_nous_tylitamisega) VALUES (7,default,true);
INSERT INTO Klient (isik_id, kliendi_seisundi_liik_kood, on_nous_tylitamisega) VALUES (8,default,default);
INSERT INTO Klient (isik_id, kliendi_seisundi_liik_kood, on_nous_tylitamisega) VALUES (9,default, true);
INSERT INTO Klient (isik_id, kliendi_seisundi_liik_kood, on_nous_tylitamisega) VALUES (10,default,default);
INSERT INTO Klient (isik_id, kliendi_seisundi_liik_kood, on_nous_tylitamisega) VALUES (11,default, true);
INSERT INTO Klient (isik_id, kliendi_seisundi_liik_kood, on_nous_tylitamisega) VALUES (12,default, default);
INSERT INTO Klient (isik_id, kliendi_seisundi_liik_kood, on_nous_tylitamisega) VALUES (13,default, default);
INSERT INTO Klient (isik_id, kliendi_seisundi_liik_kood, on_nous_tylitamisega) VALUES (14,default, true);
INSERT INTO Klient (isik_id, kliendi_seisundi_liik_kood, on_nous_tylitamisega) VALUES (15,default, default);
INSERT INTO Klient (isik_id, kliendi_seisundi_liik_kood, on_nous_tylitamisega) VALUES (16,default, true);
INSERT INTO Klient (isik_id, kliendi_seisundi_liik_kood, on_nous_tylitamisega) VALUES (17, 2, default);

INSERT INTO Kaup (kaup_kood, kauba_seisundi_liik_kood, pakend_kood, puidutyyp_kood, tootja_kood, reg_isik_id, maht_l, reg_aeg, pakk_hind)
VALUES (1111111, 1, 1, 1, 1111, 2, 20,default, 100.50);

INSERT INTO Kaup (kaup_kood, kauba_seisundi_liik_kood, pakend_kood, puidutyyp_kood, tootja_kood, reg_isik_id, maht_l, reg_aeg, pakk_hind)
VALUES (2222222, 2, 2, 2, 2222, 2, 50.3,default, 200.99);

INSERT INTO Kaup (kaup_kood, kauba_seisundi_liik_kood, pakend_kood, puidutyyp_kood, tootja_kood, reg_isik_id, maht_l, reg_aeg, pakk_hind)
VALUES (3333333, 3, 3, 3, 3333, 2, 30,default, 120.50);

INSERT INTO Kaup (kaup_kood, kauba_seisundi_liik_kood, pakend_kood, puidutyyp_kood, tootja_kood, reg_isik_id, maht_l, reg_aeg, pakk_hind)
VALUES (4444444, 4, 3, 4, 1111, 2, 30,default, 130.55);

INSERT INTO Kauba_kategooria_omamine (kaup_kood, kauba_kategooria_kood) VALUES (1111111, 11);
INSERT INTO Kauba_kategooria_omamine (kaup_kood, kauba_kategooria_kood) VALUES (1111111, 21);
INSERT INTO Kauba_kategooria_omamine (kaup_kood, kauba_kategooria_kood) VALUES (1111111, 32);
INSERT INTO Kauba_kategooria_omamine (kaup_kood, kauba_kategooria_kood) VALUES (1111111, 42);
INSERT INTO Kauba_kategooria_omamine (kaup_kood, kauba_kategooria_kood) VALUES (2222222, 12);
INSERT INTO Kauba_kategooria_omamine (kaup_kood, kauba_kategooria_kood) VALUES (2222222, 22);
INSERT INTO Kauba_kategooria_omamine (kaup_kood, kauba_kategooria_kood) VALUES (2222222, 31);
INSERT INTO Kauba_kategooria_omamine (kaup_kood, kauba_kategooria_kood) VALUES (2222222, 41);
INSERT INTO Kauba_kategooria_omamine (kaup_kood, kauba_kategooria_kood) VALUES (3333333, 11);
INSERT INTO Kauba_kategooria_omamine (kaup_kood, kauba_kategooria_kood) VALUES (3333333, 21);
INSERT INTO Kauba_kategooria_omamine (kaup_kood, kauba_kategooria_kood) VALUES (3333333, 32);
INSERT INTO Kauba_kategooria_omamine (kaup_kood, kauba_kategooria_kood) VALUES (3333333, 43);
INSERT INTO Kauba_kategooria_omamine (kaup_kood, kauba_kategooria_kood) VALUES (4444444, 12);
INSERT INTO Kauba_kategooria_omamine (kaup_kood, kauba_kategooria_kood) VALUES (4444444, 22);
INSERT INTO Kauba_kategooria_omamine (kaup_kood, kauba_kategooria_kood) VALUES (4444444, 31);
INSERT INTO Kauba_kategooria_omamine (kaup_kood, kauba_kategooria_kood) VALUES (4444444, 41);

/* VIRTUAALVAADE #1 VAATA KÕIKI KAUPE LÄBI PGADMINI CREATE VIEW */


/* SELECT kaup.kaup_kood AS Kaup_kood,
   puidutyyp.nimetus AS Puidutyyp,
   tootja.nimetus AS Tootja,
   kaup.maht_l AS Maht_l,
   pakend.nimetus AS Pakend,
   kaup.pakk_hind AS Paki_hind,
   kauba_seisundi_liik.nimetus AS Seisundi_liik
  FROM tootja
    JOIN (puidutyyp
    JOIN (pakend
    JOIN (kauba_seisundi_liik
    JOIN kaup
    ON kauba_seisundi_liik.kauba_seisundi_liik_kood = kaup.kauba_seisundi_liik_kood)
    ON pakend.pakend_kood = kaup.pakend_kood)
    ON puidutyyp.puidutyyp_kood = kaup.puidutyyp_kood)
    ON tootja.tootja_kood = kaup.tootja_kood;
*/

    CREATE OR REPLACE VIEW public.vaata_koiki_kaupu WITH (security_barrier) AS
    SELECT kaup.kaup_kood AS Kaup_kood,
       puidutyyp.nimetus AS Puidutyyp,
       tootja.nimetus AS Tootja,
       kaup.maht_l AS Maht_l,
       pakend.nimetus AS Pakend,
       kaup.pakk_hind AS Paki_hind,
       kauba_seisundi_liik.nimetus AS Seisundi_liik,
	   isik.e_mail AS Registreerija,
	   kaup.reg_aeg AS Registreerimise_aeg
	  FROM Isik
		JOIN (tootja
        JOIN (puidutyyp
        JOIN (pakend
        JOIN (kauba_seisundi_liik
        JOIN kaup
        ON kauba_seisundi_liik.kauba_seisundi_liik_kood = kaup.kauba_seisundi_liik_kood)
        ON pakend.pakend_kood = kaup.pakend_kood)
        ON puidutyyp.puidutyyp_kood = kaup.puidutyyp_kood)
        ON tootja.tootja_kood = kaup.tootja_kood)
		ON isik.isik_id = kaup.reg_isik_id
        ORDER BY kaup.kaup_kood;

    COMMENT ON VIEW public.vaata_koiki_kaupu
        IS 'Vaade leiab andmed kõikide kaupade kohta, mis on registreeritud andmebaasi. Kuvatakse andmed kaubakoodi, puidutüübi, tootja, paki mahu, pakenditüübi, paki hinna ja seisundiliigi kohta. Vaade on vajalik laojuhtajale, et näha terviklikku pilti andmebaasi registreeritud kaupadest.';

/* VIRTUAALVAADE #2 VAATA AKTIIVSEID && MITTEAKTIIVSEID KAUPE LÄBI PGADMINI CREATE VIEW */

/*
SELECT kaup.kaup_kood AS Kaup_kood,
   puidutyyp.nimetus AS Puidutyyp,
   tootja.nimetus AS Tootja,
   kaup.maht_l AS Maht_l,
   pakend.nimetus AS Pakend,
   kaup.pakk_hind AS Paki_hind,
   kaup.reg_aeg AS Reg_aeg,
   kauba_seisundi_liik.nimetus AS Seisundi_liik
  FROM tootja
    JOIN (puidutyyp
    JOIN (pakend
    JOIN (kauba_seisundi_liik
    JOIN kaup ON kauba_seisundi_liik.kauba_seisundi_liik_kood = kaup.kauba_seisundi_liik_kood) ON pakend.pakend_kood = kaup.pakend_kood) ON puidutyyp.puidutyyp_kood = kaup.puidutyyp_kood) ON tootja.tootja_kood = kaup.tootja_kood
 WHERE kauba_seisundi_liik.kauba_seisundi_liik_kood = ANY (ARRAY[2, 3]);

 */


 CREATE OR REPLACE VIEW public.vaata_ootel_mitteaktiivsed_kaupu WITH (security_barrier) AS
SELECT kaup.kaup_kood AS Kaup_kood,
   puidutyyp.nimetus AS Puidutyyp,
   tootja.nimetus AS Tootja,
   kaup.maht_l AS Maht_l,
   pakend.nimetus AS Pakend,
   kaup.pakk_hind AS Paki_hind,
   kaup.reg_aeg AS Reg_aeg,
   kauba_seisundi_liik.nimetus AS Seisundi_liik
  FROM tootja
    JOIN (puidutyyp JOIN
(pakend JOIN
    (kauba_seisundi_liik JOIN kaup ON kauba_seisundi_liik.kauba_seisundi_liik_kood = kaup.kauba_seisundi_liik_kood)
    ON pakend.pakend_kood = kaup.pakend_kood)
ON puidutyyp.puidutyyp_kood = kaup.puidutyyp_kood) ON tootja.tootja_kood = kaup.tootja_kood
 WHERE kauba_seisundi_liik.kauba_seisundi_liik_kood = ANY (ARRAY[1, 2]);

COMMENT ON VIEW public.vaata_ootel_mitteaktiivsed_kaupu
    IS 'Vaade leiab andmed kaupade kohta, mille seisundi liik on "ootel" või “mitteaktiivne”. Kuvatakse andmed kaubakoodi, puidutüübi, tootja, paki mahu, pakenditüübi, paki hinna, registreerimise aja ja seisundiliigi kohta. Vaade on vajalik kaubahaldurile ja laojuhatajale, et nad saaksid teha juhtimisotsuseid';


CREATE OR REPLACE VIEW public.vaata_aktiivsed_mitteaktiivsed_kaupu WITH (security_barrier) AS
   	 SELECT kaup.kaup_kood, puidutyyp.nimetus AS puidutyyp_nimetus, tootja.nimetus AS tootja_nimetus, kaup.maht_l, pakend.nimetus AS pakend_nimetus, kaup.pakk_hind, kaup.reg_aeg, isik.e_mail, kauba_seisundi_liik.nimetus
	 FROM ((((kaup INNER JOIN kauba_seisundi_liik ON kaup.kauba_seisundi_liik_kood = kauba_seisundi_liik.kauba_seisundi_liik_kood) INNER JOIN pakend ON kaup.pakend_kood = pakend.pakend_kood) INNER JOIN puidutyyp ON kaup.puidutyyp_kood = puidutyyp.puidutyyp_kood) INNER JOIN tootja ON kaup.tootja_kood = tootja.tootja_kood) INNER JOIN isik ON kaup.reg_isik_id = isik.isik_id
	 WHERE kaup.kauba_seisundi_liik_kood IN (2,3);


     COMMENT ON VIEW public.vaata_aktiivsed_mitteaktiivsed_kaupu
         IS 'Vaade leiab andmed kõikide kaupade kohta, mille seisundi liik on “aktiivne" või “mitteaktiivne". Kuvatakse andmed kaubakoodi, puidutüübi, tootja, paki mahu, pakenditüübi, paki hinna, registreerimise aja ja seisundiliigi kohta. Vaade on vajalik laojuhatajale, et nad ta saaks teha juhtimisotsuseid ja lopetada kaupu.';


 /* VIRTUAALVAADE #3 koondaruanne */

/*
SELECT Kaup.kaup_kood AS Kaup_kood, Puidutyyp.nimetus AS Puidutyyp, Tootja.nimetus AS Tootja, Kauba_kategooria_tyyp.nimetus AS Kategooria, Kaup.maht_l AS Maht_l, Pakend.nimetus AS Pakend, Kaup.pakk_hind AS Paki_hind, Kauba_seisundi_liik.nimetus AS Seisundi_liik, Kaup.reg_aeg AS Reg_aeg, Isik.eesnimi AS Eesnimi, Isik.perenimi AS Perenimi, Isik.e_mail AS e_mail
FROM Tootja
INNER JOIN (Puidutyyp
INNER JOIN (Pakend
INNER JOIN ((Kauba_seisundi_liik
INNER JOIN ((Kaup
INNER JOIN Isik
ON Kaup.reg_isik_id = Isik.isik_id)
INNER JOIN Tootaja
ON (Tootaja.isik_id = Kaup.reg_isik_id)
AND (Isik.isik_id = Tootaja.isik_id))
ON Kauba_seisundi_liik.kauba_seisundi_liik_kood = Kaup.kauba_seisundi_liik_kood)
INNER JOIN ((Kauba_kategooria_tyyp
INNER JOIN Kauba_kategooria
ON Kauba_kategooria_tyyp.kauba_kategooria_tyyp_kood = Kauba_kategooria.kauba_kategooria_tyyp_kood)
INNER JOIN Kauba_kategooria_omamine
ON Kauba_kategooria.kauba_kategooria_kood = Kauba_kategooria_omamine.kauba_kategooria_kood)
ON Kaup.kaup_kood = Kauba_kategooria_omamine.kaup_kood)
ON Pakend.pakend_kood = Kaup.pakend_kood)
ON Puidutyyp.puidutyyp_kood = Kaup.puidutyyp_kood)
ON Tootja.tootja_kood = Kaup.tootja_kood;
*/

CREATE OR REPLACE VIEW public.vaata_kaupade_pohiandmeid WITH (security_barrier) AS
SELECT Kaup.kaup_kood AS Kauba_kood, Puidutyyp.nimetus AS Puidutyyp, round(kaup.pakk_hind/kaup.maht_l,2) AS l_hind, Tootja.nimetus AS Tootja,
COALESCE(Kauba_kategooria_tyyp.nimetus, CAST ('Puudub' AS ei_koosne_tyhikutest)) AS Tyyp,
COALESCE(string_agg(Kauba_kategooria.nimetus, ', ' ORDER BY Kauba_kategooria.nimetus), CAST ('Puudub' AS ei_koosne_tyhikutest)) AS Kategooria, Kaup.maht_l AS Maht_l, Pakend.nimetus AS Pakend, Kaup.pakk_hind AS Paki_hind, Kauba_seisundi_liik.nimetus AS Seisundi_liik, Kaup.reg_aeg AS Reg_aeg, Isik.eesnimi AS Eesnimi, Isik.perenimi AS Perenimi, Isik.e_mail AS e_mail
FROM Tootja
INNER JOIN (Puidutyyp
INNER JOIN (Pakend
INNER JOIN ((Kauba_seisundi_liik
INNER JOIN (Kaup
INNER JOIN Isik
ON Kaup.reg_isik_id = Isik.isik_id)
ON Kauba_seisundi_liik.kauba_seisundi_liik_kood = Kaup.kauba_seisundi_liik_kood)
LEFT JOIN ((Kauba_kategooria_tyyp
LEFT JOIN Kauba_kategooria
ON Kauba_kategooria_tyyp.kauba_kategooria_tyyp_kood = Kauba_kategooria.kauba_kategooria_tyyp_kood)
LEFT JOIN Kauba_kategooria_omamine
ON Kauba_kategooria.kauba_kategooria_kood = Kauba_kategooria_omamine.kauba_kategooria_kood)
ON Kaup.kaup_kood = Kauba_kategooria_omamine.kaup_kood)
ON Pakend.pakend_kood = Kaup.pakend_kood)
ON Puidutyyp.puidutyyp_kood = Kaup.puidutyyp_kood)
ON Tootja.tootja_kood = Kaup.tootja_kood
GROUP BY Kaup.kaup_kood, Puidutyyp.nimetus, Tootja.nimetus, Kauba_kategooria_tyyp.nimetus, Kaup.maht_l, Pakend.nimetus,
Kaup.pakk_hind, Kauba_seisundi_liik.nimetus, Kaup.reg_aeg, Isik.eesnimi, Isik.perenimi, Isik.e_mail;

COMMENT ON VIEW public.vaata_kaupade_pohiandmeid
    IS 'Vaade leiab andmed kõikide kaupade kohta, mis on registreeritud andmebaasi. Kuvatakse kaupade detailandmed, kus on nähaks tavaandmetele ka kauba registreerinud isiku eesnimi, perekonnanimi ja e-maili aadress. Vaade on mõeldud kaubahaldurile ja laojuhatajale, et nad saaksid teha juhtimisotsuseid.';


    CREATE OR REPLACE VIEW public.vaata_kaupade_koondaruannet WITH (security_barrier) AS
       	SELECT Kauba_seisundi_liik.kauba_seisundi_liik_kood AS ID, upper(Kauba_seisundi_liik.nimetus) AS Nimetus, COUNT(Kaup.kaup_kood) AS Arv
    	FROM Kauba_seisundi_liik LEFT JOIN Kaup ON Kauba_seisundi_liik.kauba_seisundi_liik_kood = Kaup.kauba_seisundi_liik_kood
    	GROUP BY Kauba_seisundi_liik.kauba_seisundi_liik_kood, Kauba_seisundi_liik.nimetus
    	ORDER BY COUNT(Kaup.kaup_kood) DESC , Kauba_seisundi_liik.nimetus;

        COMMENT ON VIEW public.vaata_kaupade_koondaruannet
            IS 'Vaade leiab andmed kõikide kaupade kohta ning kuvab iga kauba elutsükli seisundi kohta selle seisundi koodi, nimetuse suurtähtedega ja hetkel selles seisundis olevate kaupade arvu. Vaade on vajalik laojuhatajale, et ta saaks teha juhtimisotsuseid.';



/* PUNK 8 FUNKTSIOONID  */


CREATE OR REPLACE FUNCTION f_unusta_kaup
(
p_kaup_kood Kaup.kaup_kood%TYPE
)
RETURNS Kaup.kaup_kood%TYPE AS $$
DELETE FROM Kaup
WHERE kaup_kood=p_kaup_kood
AND kauba_seisundi_liik_kood=1
RETURNING kaup_kood;
$$ LANGUAGE SQL SECURITY DEFINER
SET search_path=public, pg_temp;

CREATE OR REPLACE FUNCTION f_aktiveeri_kaup
(
p_kaup_kood Kaup.kaup_kood%TYPE
)
RETURNS Kaup.kaup_kood%TYPE AS $$
UPDATE Kaup SET
kaup_kood=p_kaup_kood,
kauba_seisundi_liik_kood=3
WHERE kaup_kood=p_kaup_kood
AND kauba_seisundi_liik_kood IN (1, 2)
RETURNING kaup_kood;
$$ LANGUAGE SQL SECURITY DEFINER
SET search_path=public, pg_temp;


CREATE OR REPLACE FUNCTION f_muuda_kaup_mitteaktiivseks
(
p_kaup_kood Kaup.kaup_kood%TYPE
)
RETURNS Kaup.kaup_kood%TYPE AS $$
UPDATE Kaup SET
kaup_kood=p_kaup_kood,
kauba_seisundi_liik_kood=2
WHERE kaup_kood=p_kaup_kood
AND kauba_seisundi_liik_kood=3
RETURNING kaup_kood;
$$ LANGUAGE SQL SECURITY DEFINER
SET search_path=public, pg_temp;

CREATE OR REPLACE FUNCTION f_lisa_kaup_kategooriasse
(
p_kaup_kood Kaup.kaup_kood%TYPE,
p_kauba_kategooria_kood Kauba_kategooria_omamine.kaup_kood%TYPE
)
RETURNS BOOLEAN AS
$BODY$
BEGIN
  SELECT kaup_kood FROM Kaup WHERE kaup_kood=p_kaup_kood AND kauba_seisundi_liik_kood IN (1, 2) FOR UPDATE;
  IF FOUND THEN
      INSERT INTO Kauba_kategooria_omamine(
      kaup_kood,
      kauba_kategooria_kood
      )
      VALUES
      (
      p_kaup_kood,
      p_kauba_kategooria_kood
      );
      RETURN TRUE;
  END IF;
  RETURN FALSE;
END;
$BODY$ LANGUAGE plpgsql SECURITY DEFINER
SET search_path=public, pg_temp;

CREATE OR REPLACE FUNCTION f_registreeri_kaup (
p_kaup_kood Kaup.kaup_kood%TYPE,
p_pakend_kood Kaup.pakend_kood%TYPE,
p_puidutyyp_kood Kaup.puidutyyp_kood%TYPE,
p_tootja_kood Kaup.tootja_kood%TYPE,
p_reg_isik_id Kaup.reg_isik_id%TYPE,
p_maht_l Kaup.maht_l%TYPE,
p_pakk_hind Kaup.pakk_hind%TYPE
)
RETURNS Kaup.kaup_kood%TYPE
AS $$
INSERT INTO Kaup(
kaup_kood,
kauba_seisundi_liik_kood,
pakend_kood,
puidutyyp_kood,
tootja_kood,
reg_isik_id,
maht_l,
reg_aeg,
pakk_hind
)
VALUES
(
p_kaup_kood,
1,
p_pakend_kood,
p_puidutyyp_kood,
p_tootja_kood,
p_reg_isik_id,
p_maht_l,
default,
p_pakk_hind
) RETURNING kaup_kood;
$$ LANGUAGE SQL SECURITY DEFINER
SET search_path=public, pg_temp;

CREATE OR REPLACE FUNCTION f_muuda_kaup
(
p_kaup_kood_vana Kaup.kaup_kood%TYPE,
p_kaup_kood_uus Kaup.kaup_kood%TYPE,
p_pakend_kood_uus Kaup.pakend_kood%TYPE,
p_puidutyyp_kood_uus Kaup.puidutyyp_kood%TYPE,
p_tootja_kood_uus Kaup.tootja_kood%TYPE,
p_maht_l_uus Kaup.maht_l%TYPE,
p_pakk_hind_uus Kaup.pakk_hind%TYPE
)
RETURNS Kaup.kaup_kood%TYPE AS $$
UPDATE Kaup SET
kaup_kood=coalesce(p_kaup_kood_uus, kaup_kood),
pakend_kood=coalesce(p_pakend_kood_uus, pakend_kood),
puidutyyp_kood=coalesce(p_puidutyyp_kood_uus, puidutyyp_kood),
tootja_kood=coalesce(p_tootja_kood_uus, tootja_kood),
maht_l=coalesce(p_maht_l_uus, maht_l),
pakk_hind=coalesce(p_pakk_hind_uus, pakk_hind)
WHERE kaup_kood=p_kaup_kood_vana
AND kauba_seisundi_liik_kood IN (1, 2)
RETURNING kaup_kood;
$$ LANGUAGE SQL CALLED ON NULL INPUT SECURITY DEFINER
SET search_path=public, pg_temp;


CREATE OR REPLACE FUNCTION f_lopeta_kaup
(
p_kaup_kood Kaup.kaup_kood%TYPE
)
RETURNS Kaup.kaup_kood%TYPE AS $$
UPDATE Kaup SET
kaup_kood=p_kaup_kood,
kauba_seisundi_liik_kood=4
WHERE kaup_kood=p_kaup_kood
AND kauba_seisundi_liik_kood IN (2, 3)
RETURNING kaup_kood;
$$ LANGUAGE SQL SECURITY DEFINER
SET search_path=public, pg_temp;

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA public;
UPDATE Isik SET parool = public.crypt(parool,public.gen_salt('bf', 11));

ALTER TABLE Isik DROP CONSTRAINT uq_isik_e_mail;
CREATE UNIQUE INDEX idx_isik_e_mail_on_unikaalne ON Isik (Upper(e_mail));

CREATE OR REPLACE FUNCTION f_on_laojuhataja(p_e_mail text, p_parool text)
RETURNS boolean AS $$
DECLARE
rslt boolean;
BEGIN
SELECT INTO rslt (parool = public.crypt(p_parool,
parool)) FROM Isik INNER JOIN Tootaja ON
Upper(Isik.e_mail)=Upper(p_e_mail) AND Tootaja.isik_id=Isik.isik_id
AND Tootaja.amet_kood IN (1324) AND Tootaja.tootaja_seisundi_liik_kood IN (1, 2);
RETURN coalesce(rslt, FALSE);
END;
$$ LANGUAGE plpgsql SECURITY DEFINER STABLE
SET search_path = public, pg_temp;


CREATE OR REPLACE FUNCTION kauba_seisundi_liik_kood_peab_olema_1()
  RETURNS trigger AS
$BODY$
BEGIN
    RAISE EXCEPTION 'Kaup luuakse ebakorrektses seisundis, uus kaup peab olema seisundis ootel!';
END;
$BODY$
language plpgsql SECURITY DEFINER
SET search_path = public, pg_temp;

CREATE OR REPLACE FUNCTION kustutada_voib_kaupa_kauba_seisundi_liik_koodiga_1()
  RETURNS trigger AS
$BODY$
BEGIN
    RAISE EXCEPTION 'Ainult ootel kaupa tohib kustutada!';
END;
$BODY$
language plpgsql SECURITY DEFINER
SET search_path=public, pg_temp;


CREATE OR REPLACE FUNCTION isikul_ei_ole_oigust_kaupa_muuta_ega_lisada()
  RETURNS trigger AS
$BODY$
BEGIN
    SELECT isik_id FROM Tootaja WHERE amet_kood=4321 and isik_id=NEW.reg_isik_id and tootaja_seisundi_liik_kood IN (1, 2) FOR UPDATE;
    IF NOT FOUND THEN
      RAISE EXCEPTION 'Isikul ei ole oigust kaupa lisada ega andmeid muuta! Peab olema kaubahaldur';
    END IF;
    RETURN NEW;
END;
$BODY$
language plpgsql SECURITY DEFINER
SET search_path=public, pg_temp;


--funktsioonide lopp

COMMENT ON FUNCTION f_muuda_kaup(
p_kaup_kood_vana Kaup.kaup_kood%TYPE,
p_kaup_kood_uus Kaup.kaup_kood%TYPE,
p_pakend_kood_uus Kaup.pakend_kood%TYPE,
p_puidutyyp_kood_uus Kaup.puidutyyp_kood%TYPE,
p_tootja_kood_uus Kaup.tootja_kood%TYPE,
p_maht_l_uus Kaup.maht_l%TYPE,
p_pakk_hind_uus Kaup.pakk_hind%TYPE
) IS 'Selle Funktsiooni abil saab muuta kauba andmeid. Funktsioon realiseerib andmebaasioperatsiooni number 6. Parameetri p_kaup_kood_vana oodatav väärtus on muudetava kauba koodi indentifikaator, parameetri p_kaup_kood_uus oodatav väärtus on muudetava kauba koodi uus väärtus, parameetri p_pakend_kood oodatav väärtus on kauba pakendi koodi indentifikaator, parameetri p_puidutyyp_kood oodatav väärtus on puidutüübi koodi indentifikaator, parameetri p_tootja_kood oodatav väärtus on kauba tootja koodi indentifikaator, parameetri p_maht_l oodatav väärtus on kauba mahu indentifikaator, parameetri p_pakk_hind oodatav väärtus on kauba paki hinna indentifikaator.';

COMMENT ON FUNCTION f_lopeta_kaup(p_kaup_kood Kaup.kaup_kood%TYPE) IS 'Selle funktsiooni abil saab lõpetada kaupa. Funktsioon realiseerib andmebaasioperatsiooni number 5. Parameetri p_kaup_kood oodatav väärtus on kauba identifikaator.';

COMMENT ON FUNCTION f_registreeri_kaup (
p_kaup_kood Kaup.kaup_kood%TYPE,
p_pakend_kood Kaup.pakend_kood%TYPE,
p_puidutyyp_kood Kaup.puidutyyp_kood%TYPE,
p_tootja_kood Kaup.tootja_kood%TYPE,
p_reg_isik_id Kaup.reg_isik_id%TYPE,
p_maht_l Kaup.maht_l%TYPE,
p_pakk_hind Kaup.pakk_hind%TYPE
) IS 'Selle funktsiooni abil saab lisada andmebaasi uue kauba.  Funktsioon realiseerib andmebaasioperatsiooni number 1. Parameetri p_kaup_kood oodatav väärtus on muudetava kauba koodi indentifikaator, parameetri p_pakend_kood oodatav väärtus on kauba pakendi koodi indentifikaator, parameetri p_puidutyyp_kood oodatav väärtus on puidutüübi koodi indentifikaator, parameetri p_tootja_kood oodatav väärtus on kauba tootja koodi indentifikaator, parameetri p_reg_isik_id oodatav väärtus on registreerinud isiku id identifikaator, parameetri p_maht_l oodatav väärtus on kauba mahu indentifikaator, parameetri p_pakk_hind oodatav väärtus on kauba paki hinna indentifikaator.';

COMMENT ON FUNCTION f_aktiveeri_kaup(p_kaup_kood Kaup.kaup_kood%TYPE) IS 'Selle funktsiooni abil saab aktiveerida kaupa, mille seisundi liik kood on eelnevalt kas 1 või 2, ehk seisundis ootel või mitteaktiivne. Funktsioon realiseerib andmeoperatsiooni number 3.';

COMMENT ON FUNCTION f_lisa_kaup_kategooriasse(p_kaup_kood Kaup.kaup_kood%TYPE, p_kauba_kategooria_kood Kauba_kategooria_omamine.kaup_kood%TYPE) IS 'Selle funktsiooni abil saab  kauba, mille seisundi liik kood on 1, ehk seisundis ootel. Funktsioon realiseerib andmeoperatsiooni number 7.';

COMMENT ON FUNCTION f_muuda_kaup_mitteaktiivseks(p_kaup_kood Kaup.kaup_kood%TYPE) IS 'Selle funktsiooni abil saab kaupa määrata mitteaktiivseks, mille seisundi liik kood on eelnevalt 3, ehk seisundis aktiivne. Funktsioon realiseerib andmeoperatsiooni number 4.';

COMMENT ON FUNCTION f_unusta_kaup(p_kaup_kood Kaup.kaup_kood%TYPE) IS 'Selle funktsiooni abil saab kustudada kauba, mille seisundi liik kood on 1, ehk seisundis ootel. Funktsioon realiseerib andmeoperatsiooni number 2.';

COMMENT ON FUNCTION kauba_seisundi_liik_kood_peab_olema_1() IS 'Funktsioon kontrollib, et lisamisel peab kaup olema seisundis 1 ehk “ootel”.';

COMMENT ON FUNCTION kustutada_voib_kaupa_kauba_seisundi_liik_koodiga_1() IS 'Funktsioon kontrollib, et kustutatava kauba seisundi liik peab olema 1 ehk “ootel".';

COMMENT ON FUNCTION isikul_ei_ole_oigust_kaupa_muuta_ega_lisada() IS 'Funktsioon kontrollib, et isikul, kelle ametikood ei ole 4321, siis tal ei ole oigust kaupa muuta ega lisada. Samuti kontrollib, et tootaja_seisundi_liik oleks 1 "tootab" voi 2 "praktikal"';

COMMENT ON FUNCTION f_on_laojuhataja(p_e_mail text,
p_parool text) IS 'Selle funktsiooni abil autenditakse
laojuhatajat. Parameetri p_e_mail oodatav väärtus on
tõstutundetu e_mail ja p_parool oodatav väärtus on
tõstutundlik avatekstiline parool. Laojuhatajal on õigus
süsteemi siseneda, vaid siis kui tema seisundiks on Töötab
või Praktikal.';


CREATE TRIGGER kaup_insert_trigger_kontrolli_isik BEFORE INSERT ON Kaup
FOR EACH ROW
EXECUTE PROCEDURE isikul_ei_ole_oigust_kaupa_muuta_ega_lisada();


CREATE TRIGGER kaup_update_trigger_kontrolli_isik BEFORE UPDATE ON Kaup
FOR EACH ROW
EXECUTE PROCEDURE isikul_ei_ole_oigust_kaupa_muuta_ega_lisada();

CREATE TRIGGER kaup_insert_trigger BEFORE INSERT ON Kaup
FOR EACH ROW
WHEN (NOT (NEW.kauba_seisundi_liik_kood=1))
EXECUTE PROCEDURE kauba_seisundi_liik_kood_peab_olema_1();

/* kui üritan kustutada kaupa, mis on seisundil ootel, siis see on võimalik */

CREATE TRIGGER kaup_delete_trigger BEFORE DELETE ON Kaup
FOR EACH ROW
WHEN (NOT(OLD.kauba_seisundi_liik_kood=1))
EXECUTE PROCEDURE kustutada_voib_kaupa_kauba_seisundi_liik_koodiga_1();

COMMENT ON TRIGGER kaup_insert_trigger ON Kaup IS 'See trigger kontrollib, kas kaup luuakse korrektses seisundis. Kauba algne seisund peab olema ootel';

COMMENT ON TRIGGER kaup_delete_trigger ON Kaup IS 'See trigger kontrollib, kas ei ole kauba kustutamisel kauba seisundi liik kood 1, ehk ootel';

COMMENT ON TRIGGER kaup_update_trigger_kontrolli_isik ON Kaup IS 'See trigger kontrollib, kas kauba andmeid muudab õigel ametikohal olev isik';

COMMENT ON TRIGGER kaup_insert_trigger_kontrolli_isik ON Kaup IS 'See trigger kontrollib, kas kaupa lisab õigel ametikohal olev isik';

COMMENT ON TABLE Amet IS 'Kuna ametite kirjeldust võidakse hiljem muuta, siis määrame tabeli plokkidesse vaba ruumi 10% ulatuses (fillfactor=90)';

COMMENT ON TABLE Isik IS 'Kuna isikutega seotud anmeid võidakse muuta, siis määrame tabeli plokkidesse vaba ruumi 10% ulatuses (fillfactor=90)';

--VACUUM ANALYZE;

ANALYZE;
EXPLAIN SELECT * FROM vaata_ootel_mitteaktiivsed_kaupu;

REASSIGN OWNED BY laojuhataja TO postgres;

REVOKE CREATE, USAGE ON SCHEMA public FROM PUBLIC;

REVOKE USAGE ON LANGUAGE plpgsql FROM PUBLIC;

REVOKE EXECUTE ON FUNCTION
f_muuda_kaup(
p_kaup_kood_vana Kaup.kaup_kood%TYPE,
p_kaup_kood_uus Kaup.kaup_kood%TYPE,
p_pakend_kood_uus Kaup.pakend_kood%TYPE,
p_puidutyyp_kood_uus Kaup.puidutyyp_kood%TYPE,
p_tootja_kood_uus Kaup.tootja_kood%TYPE,
p_maht_l_uus Kaup.maht_l%TYPE,
p_pakk_hind_uus Kaup.pakk_hind%TYPE
),
f_registreeri_kaup (
p_kaup_kood Kaup.kaup_kood%TYPE,
p_pakend_kood Kaup.pakend_kood%TYPE,
p_puidutyyp_kood Kaup.puidutyyp_kood%TYPE,
p_tootja_kood Kaup.tootja_kood%TYPE,
p_reg_isik_id Kaup.reg_isik_id%TYPE,
p_maht_l Kaup.maht_l%TYPE,
p_pakk_hind Kaup.pakk_hind%TYPE
),
f_lopeta_kaup(p_kaup_kood Kaup.kaup_kood%TYPE)
FROM PUBLIC;

REVOKE CONNECT, TEMP ON DATABASE "t154829_SAEPURU_PROJEKT" FROM PUBLIC;

REVOKE USAGE ON LANGUAGE plpgsql FROM PUBLIC;

REVOKE CREATE, USAGE ON SCHEMA public FROM PUBLIC;

REVOKE EXECUTE ON FUNCTION
f_lopeta_kaup(p_kaup_kood Kaup.kaup_kood%TYPE),
f_unusta_kaup(p_kaup_kood Kaup.kaup_kood%TYPE),
f_muuda_kaup_mitteaktiivseks(p_kaup_kood Kaup.kaup_kood%TYPE),
f_aktiveeri_kaup(p_kaup_kood Kaup.kaup_kood%TYPE),
f_on_laojuhataja(p_e_mail text, p_parool text),
f_lisa_kaup_kategooriasse(p_kaup_kood Kaup.kaup_kood%TYPE, p_kauba_kategooria_kood Kauba_kategooria_omamine.kaup_kood%TYPE),
f_muuda_kaup(
p_kaup_kood_vana Kaup.kaup_kood%TYPE,
p_kaup_kood_uus Kaup.kaup_kood%TYPE,
p_pakend_kood_uus Kaup.pakend_kood%TYPE,
p_puidutyyp_kood_uus Kaup.puidutyyp_kood%TYPE,
p_tootja_kood_uus Kaup.tootja_kood%TYPE,
p_maht_l_uus Kaup.maht_l%TYPE,
p_pakk_hind_uus Kaup.pakk_hind%TYPE
),
f_registreeri_kaup (
p_kaup_kood Kaup.kaup_kood%TYPE,
p_pakend_kood Kaup.pakend_kood%TYPE,
p_puidutyyp_kood Kaup.puidutyyp_kood%TYPE,
p_tootja_kood Kaup.tootja_kood%TYPE,
p_reg_isik_id Kaup.reg_isik_id%TYPE,
p_maht_l Kaup.maht_l%TYPE,
p_pakk_hind Kaup.pakk_hind%TYPE
)
FROM PUBLIC;

REVOKE EXECUTE ON ALL FUNCTIONS IN SCHEMA public FROM PUBLIC;

REVOKE USAGE ON SCHEMA public FROM laojuhataja;

REVOKE CONNECT ON DATABASE "t154829_SAEPURU_PROJEKT" FROM laojuhataja;

REVOKE SELECT ON
public.vaata_aktiivsed_mitteaktiivsed_kaupu,
public.vaata_ootel_mitteaktiivsed_kaupu,
public.vaata_kaupade_pohiandmeid,
public.vaata_koiki_kaupu,
public.vaata_kaupade_koondaruannet
FROM laojuhataja;

REVOKE EXECUTE ON FUNCTION
f_lopeta_kaup(p_kaup_kood Kaup.kaup_kood%TYPE)
FROM laojuhataja;


DROP USER IF EXISTS laojuhataja;

CREATE USER laojuhataja WITH PASSWORD '1337';

GRANT CONNECT ON DATABASE "t154829_SAEPURU_PROJEKT" TO laojuhataja;

GRANT USAGE ON SCHEMA public TO laojuhataja;

GRANT SELECT ON
public.vaata_aktiivsed_mitteaktiivsed_kaupu,
public.vaata_ootel_mitteaktiivsed_kaupu,
public.vaata_kaupade_pohiandmeid,
public.vaata_koiki_kaupu,
public.vaata_kaupade_koondaruannet
TO laojuhataja;

GRANT EXECUTE ON FUNCTION
f_on_laojuhataja(p_e_mail text, p_parool text),
f_lopeta_kaup(p_kaup_kood Kaup.kaup_kood%TYPE)
TO laojuhataja;

ALTER DEFAULT PRIVILEGES REVOKE EXECUTE ON FUNCTIONS FROM PUBLIC;

--tuleb kirjutada seletavad laused ühe nii-öelda analyzei kohta
